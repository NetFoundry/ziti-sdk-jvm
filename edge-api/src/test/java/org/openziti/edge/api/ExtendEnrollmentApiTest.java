/*
 * Ziti Edge Client
 * OpenZiti Edge Client API
 *
 * The version of the OpenAPI document: 0.26.18
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openziti.edge.api;

import org.openziti.edge.ApiException;
import org.openziti.edge.model.ApiErrorEnvelope;
import org.openziti.edge.model.Empty;
import org.openziti.edge.model.EnrollmentCertsEnvelope;
import org.openziti.edge.model.IdentityExtendEnrollmentEnvelope;
import org.openziti.edge.model.IdentityExtendEnrollmentRequest;
import org.openziti.edge.model.IdentityExtendValidateEnrollmentRequest;
import org.openziti.edge.model.RouterExtendEnrollmentRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for ExtendEnrollmentApi
 */
@Disabled
public class ExtendEnrollmentApiTest {

    private final ExtendEnrollmentApi api = new ExtendEnrollmentApi();

    
    /**
     * Allows the current identity to recieve a new certificate associated with a certificate based authenticator
     *
     * This endpoint only functions for certificates issued by the controller. 3rd party certificates are not handled. Allows an identity to extend its certificate&#39;s expiration date by using its current and valid client certificate to submit a CSR. This CSR may be passed in using a new private key, thus allowing private key rotation. The response from this endpoint is a new client certificate which the client must  be verified via the /authenticators/{id}/extend-verify endpoint. After verification is completion any new connections must be made with new certificate. Prior to verification the old client certificate remains active.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extendCurrentIdentityAuthenticatorTest() throws ApiException {
        String id = null;
        IdentityExtendEnrollmentRequest extend = null;
        CompletableFuture<IdentityExtendEnrollmentEnvelope> response = 
        api.extendCurrentIdentityAuthenticator(id, extend);
        
        // TODO: test validations
    }
    
    /**
     * Extend the life of a currently enrolled router&#39;s certificates
     *
     * Allows a router to extend its certificates&#39; expiration date by using its current and valid client certificate to submit a CSR. This CSR may be passed in using a new private key, thus allowing private key rotation or swapping.  After completion any new connections must be made with certificates returned from a 200 OK response. The previous client certificate is rendered invalid for use with the controller even if it has not expired.  This request must be made using the existing, valid, client certificate. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extendRouterEnrollmentTest() throws ApiException {
        RouterExtendEnrollmentRequest routerExtendEnrollmentRequest = null;
        CompletableFuture<EnrollmentCertsEnvelope> response = 
        api.extendRouterEnrollment(routerExtendEnrollmentRequest);
        
        // TODO: test validations
    }
    
    /**
     * Allows the current identity to validate reciept of a new client certificate
     *
     * After submitting a CSR for a new client certificate the resulting public certificate must be re-submitted to this endpoint to verify receipt. After receipt, the new client certificate must be used for new authentication requests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extendVerifyCurrentIdentityAuthenticatorTest() throws ApiException {
        String id = null;
        IdentityExtendValidateEnrollmentRequest extend = null;
        CompletableFuture<Empty> response = 
        api.extendVerifyCurrentIdentityAuthenticator(id, extend);
        
        // TODO: test validations
    }
    
}
