/*
 * Ziti Edge Client
 * OpenZiti Edge Client API
 *
 * The version of the OpenAPI document: 0.26.18
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openziti.edge.api;

import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.openziti.edge.ApiException;
import org.openziti.edge.model.Empty;
import org.openziti.edge.model.EnrollmentCertsEnvelope;
import org.openziti.edge.model.IdentityExtendEnrollmentEnvelope;
import org.openziti.edge.model.IdentityExtendEnrollmentRequest;
import org.openziti.edge.model.IdentityExtendValidateEnrollmentRequest;
import org.openziti.edge.model.RouterExtendEnrollmentRequest;

/** API tests for EnrollApi */
@Disabled
public class EnrollApiTest {

    private final EnrollApi api = new EnrollApi();

    /**
     * Enroll an identity via one-time-token
     *
     * <p>present a OTT and CSR to receive a long-lived client certificate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollTest() throws ApiException {
        UUID token = null;
        String method = null;
        CompletableFuture<Empty> response = api.enroll(token, method);

        // TODO: test validations
    }

    /**
     * Enroll an identity with a pre-exchanged certificate
     *
     * <p>For CA auto enrollment, an identity is not created beforehand. Instead one will be created
     * during enrollment. The client will present a client certificate that is signed by a
     * Certificate Authority that has been added and verified (See POST /cas and POST
     * /cas/{id}/verify). During this process no CSRs are requires as the client should already be
     * in possession of a valid certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollCaTest() throws ApiException {
        CompletableFuture<Empty> response = api.enrollCa();

        // TODO: test validations
    }

    /**
     * Enroll an edge-router
     *
     * <p>Enrolls an edge-router via a one-time-token to establish a certificate based identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollErOttTest() throws ApiException {
        UUID token = null;
        CompletableFuture<EnrollmentCertsEnvelope> response = api.enrollErOtt(token);

        // TODO: test validations
    }

    /**
     * Enroll an identity via one-time-token
     *
     * <p>Enroll an identity via a one-time-token which is supplied via a query string parameter.
     * This enrollment method expects a PEM encoded CSRs to be provided for fulfillment. It is up to
     * the enrolling identity to manage the private key backing the CSR request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollOttTest() throws ApiException {
        UUID token = null;
        CompletableFuture<String> response = api.enrollOtt(token);

        // TODO: test validations
    }

    /**
     * Enroll an identity via one-time-token with a pre-exchanged client certificate
     *
     * <p>Enroll an identity via a one-time-token that also requires a pre-exchanged client
     * certificate to match a Certificate Authority that has been added and verified (See POST /cas
     * and POST /cas{id}/verify). The client must present a client certificate signed by CA
     * associated with the enrollment. This enrollment is similar to CA auto enrollment except that
     * is required the identity to be pre-created. As the client certificate has been pre-exchanged
     * there is no CSR input to this enrollment method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollOttCaTest() throws ApiException {
        UUID token = null;
        CompletableFuture<Empty> response = api.enrollOttCa(token);

        // TODO: test validations
    }

    /**
     * Enroll an identity via one-time-token
     *
     * <p>Enrolls an identity via a one-time-token to establish an initial username and password
     * combination
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ernollUpdbTest() throws ApiException {
        UUID token = null;
        CompletableFuture<Empty> response = api.ernollUpdb(token);

        // TODO: test validations
    }

    /**
     * Allows the current identity to recieve a new certificate associated with a certificate based
     * authenticator
     *
     * <p>This endpoint only functions for certificates issued by the controller. 3rd party
     * certificates are not handled. Allows an identity to extend its certificate&#39;s expiration
     * date by using its current and valid client certificate to submit a CSR. This CSR may be
     * passed in using a new private key, thus allowing private key rotation. The response from this
     * endpoint is a new client certificate which the client must be verified via the
     * /authenticators/{id}/extend-verify endpoint. After verification is completion any new
     * connections must be made with new certificate. Prior to verification the old client
     * certificate remains active.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendCurrentIdentityAuthenticatorTest() throws ApiException {
        String id = null;
        IdentityExtendEnrollmentRequest extend = null;
        CompletableFuture<IdentityExtendEnrollmentEnvelope> response =
                api.extendCurrentIdentityAuthenticator(id, extend);

        // TODO: test validations
    }

    /**
     * Extend the life of a currently enrolled router&#39;s certificates
     *
     * <p>Allows a router to extend its certificates&#39; expiration date by using its current and
     * valid client certificate to submit a CSR. This CSR may be passed in using a new private key,
     * thus allowing private key rotation or swapping. After completion any new connections must be
     * made with certificates returned from a 200 OK response. The previous client certificate is
     * rendered invalid for use with the controller even if it has not expired. This request must be
     * made using the existing, valid, client certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendRouterEnrollmentTest() throws ApiException {
        RouterExtendEnrollmentRequest routerExtendEnrollmentRequest = null;
        CompletableFuture<EnrollmentCertsEnvelope> response =
                api.extendRouterEnrollment(routerExtendEnrollmentRequest);

        // TODO: test validations
    }

    /**
     * Allows the current identity to validate reciept of a new client certificate
     *
     * <p>After submitting a CSR for a new client certificate the resulting public certificate must
     * be re-submitted to this endpoint to verify receipt. After receipt, the new client certificate
     * must be used for new authentication requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendVerifyCurrentIdentityAuthenticatorTest() throws ApiException {
        String id = null;
        IdentityExtendValidateEnrollmentRequest extend = null;
        CompletableFuture<Empty> response =
                api.extendVerifyCurrentIdentityAuthenticator(id, extend);

        // TODO: test validations
    }
}
