/*
 * Ziti Edge Client
 * OpenZiti Edge Client API
 *
 * The version of the OpenAPI document: 0.26.18
 * Contact: help@openziti.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openziti.edge.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openziti.edge.model.AuthQueryDetail;
import org.openziti.edge.model.EntityRef;
import org.openziti.edge.model.Link;
import org.openziti.edge.model.Tags;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * An API Session object for the current API session
 */
@JsonPropertyOrder({
  CurrentApiSessionDetail.JSON_PROPERTY_LINKS,
  CurrentApiSessionDetail.JSON_PROPERTY_CREATED_AT,
  CurrentApiSessionDetail.JSON_PROPERTY_ID,
  CurrentApiSessionDetail.JSON_PROPERTY_TAGS,
  CurrentApiSessionDetail.JSON_PROPERTY_UPDATED_AT,
  CurrentApiSessionDetail.JSON_PROPERTY_AUTH_QUERIES,
  CurrentApiSessionDetail.JSON_PROPERTY_AUTHENTICATOR_ID,
  CurrentApiSessionDetail.JSON_PROPERTY_CACHED_LAST_ACTIVITY_AT,
  CurrentApiSessionDetail.JSON_PROPERTY_CONFIG_TYPES,
  CurrentApiSessionDetail.JSON_PROPERTY_IDENTITY,
  CurrentApiSessionDetail.JSON_PROPERTY_IDENTITY_ID,
  CurrentApiSessionDetail.JSON_PROPERTY_IP_ADDRESS,
  CurrentApiSessionDetail.JSON_PROPERTY_IS_MFA_COMPLETE,
  CurrentApiSessionDetail.JSON_PROPERTY_IS_MFA_REQUIRED,
  CurrentApiSessionDetail.JSON_PROPERTY_LAST_ACTIVITY_AT,
  CurrentApiSessionDetail.JSON_PROPERTY_TOKEN,
  CurrentApiSessionDetail.JSON_PROPERTY_EXPIRATION_SECONDS,
  CurrentApiSessionDetail.JSON_PROPERTY_EXPIRES_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-29T11:06:12.834975-04:00[America/New_York]", comments = "Generator version: 7.6.0")
public class CurrentApiSessionDetail {
  public static final String JSON_PROPERTY_LINKS = "_links";
  private Map<String, Link> links = new HashMap<>();

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_TAGS = "tags";
  private Tags tags;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_AUTH_QUERIES = "authQueries";
  private List<AuthQueryDetail> authQueries = new ArrayList<>();

  public static final String JSON_PROPERTY_AUTHENTICATOR_ID = "authenticatorId";
  private String authenticatorId;

  public static final String JSON_PROPERTY_CACHED_LAST_ACTIVITY_AT = "cachedLastActivityAt";
  private OffsetDateTime cachedLastActivityAt;

  public static final String JSON_PROPERTY_CONFIG_TYPES = "configTypes";
  private List<String> configTypes = new ArrayList<>();

  public static final String JSON_PROPERTY_IDENTITY = "identity";
  private EntityRef identity;

  public static final String JSON_PROPERTY_IDENTITY_ID = "identityId";
  private String identityId;

  public static final String JSON_PROPERTY_IP_ADDRESS = "ipAddress";
  private String ipAddress;

  public static final String JSON_PROPERTY_IS_MFA_COMPLETE = "isMfaComplete";
  private Boolean isMfaComplete;

  public static final String JSON_PROPERTY_IS_MFA_REQUIRED = "isMfaRequired";
  private Boolean isMfaRequired;

  public static final String JSON_PROPERTY_LAST_ACTIVITY_AT = "lastActivityAt";
  private OffsetDateTime lastActivityAt;

  public static final String JSON_PROPERTY_TOKEN = "token";
  private String token;

  public static final String JSON_PROPERTY_EXPIRATION_SECONDS = "expirationSeconds";
  private Integer expirationSeconds;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  private OffsetDateTime expiresAt;

  public CurrentApiSessionDetail() { 
  }

  public CurrentApiSessionDetail links(Map<String, Link> links) {
    this.links = links;
    return this;
  }

  public CurrentApiSessionDetail putLinksItem(String key, Link linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * A map of named links
   * @return links
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, Link> getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLinks(Map<String, Link> links) {
    this.links = links;
  }


  public CurrentApiSessionDetail createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CurrentApiSessionDetail id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public CurrentApiSessionDetail tags(Tags tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Tags getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(Tags tags) {
    this.tags = tags;
  }


  public CurrentApiSessionDetail updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CurrentApiSessionDetail authQueries(List<AuthQueryDetail> authQueries) {
    this.authQueries = authQueries;
    return this;
  }

  public CurrentApiSessionDetail addAuthQueriesItem(AuthQueryDetail authQueriesItem) {
    if (this.authQueries == null) {
      this.authQueries = new ArrayList<>();
    }
    this.authQueries.add(authQueriesItem);
    return this;
  }

   /**
   * Get authQueries
   * @return authQueries
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTH_QUERIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AuthQueryDetail> getAuthQueries() {
    return authQueries;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_QUERIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthQueries(List<AuthQueryDetail> authQueries) {
    this.authQueries = authQueries;
  }


  public CurrentApiSessionDetail authenticatorId(String authenticatorId) {
    this.authenticatorId = authenticatorId;
    return this;
  }

   /**
   * Get authenticatorId
   * @return authenticatorId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTHENTICATOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAuthenticatorId() {
    return authenticatorId;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthenticatorId(String authenticatorId) {
    this.authenticatorId = authenticatorId;
  }


  public CurrentApiSessionDetail cachedLastActivityAt(OffsetDateTime cachedLastActivityAt) {
    this.cachedLastActivityAt = cachedLastActivityAt;
    return this;
  }

   /**
   * Get cachedLastActivityAt
   * @return cachedLastActivityAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CACHED_LAST_ACTIVITY_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCachedLastActivityAt() {
    return cachedLastActivityAt;
  }


  @JsonProperty(JSON_PROPERTY_CACHED_LAST_ACTIVITY_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCachedLastActivityAt(OffsetDateTime cachedLastActivityAt) {
    this.cachedLastActivityAt = cachedLastActivityAt;
  }


  public CurrentApiSessionDetail configTypes(List<String> configTypes) {
    this.configTypes = configTypes;
    return this;
  }

  public CurrentApiSessionDetail addConfigTypesItem(String configTypesItem) {
    if (this.configTypes == null) {
      this.configTypes = new ArrayList<>();
    }
    this.configTypes.add(configTypesItem);
    return this;
  }

   /**
   * Get configTypes
   * @return configTypes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIG_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getConfigTypes() {
    return configTypes;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigTypes(List<String> configTypes) {
    this.configTypes = configTypes;
  }


  public CurrentApiSessionDetail identity(EntityRef identity) {
    this.identity = identity;
    return this;
  }

   /**
   * Get identity
   * @return identity
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityRef getIdentity() {
    return identity;
  }


  @JsonProperty(JSON_PROPERTY_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentity(EntityRef identity) {
    this.identity = identity;
  }


  public CurrentApiSessionDetail identityId(String identityId) {
    this.identityId = identityId;
    return this;
  }

   /**
   * Get identityId
   * @return identityId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIdentityId() {
    return identityId;
  }


  @JsonProperty(JSON_PROPERTY_IDENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentityId(String identityId) {
    this.identityId = identityId;
  }


  public CurrentApiSessionDetail ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIpAddress() {
    return ipAddress;
  }


  @JsonProperty(JSON_PROPERTY_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public CurrentApiSessionDetail isMfaComplete(Boolean isMfaComplete) {
    this.isMfaComplete = isMfaComplete;
    return this;
  }

   /**
   * Get isMfaComplete
   * @return isMfaComplete
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_MFA_COMPLETE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsMfaComplete() {
    return isMfaComplete;
  }


  @JsonProperty(JSON_PROPERTY_IS_MFA_COMPLETE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsMfaComplete(Boolean isMfaComplete) {
    this.isMfaComplete = isMfaComplete;
  }


  public CurrentApiSessionDetail isMfaRequired(Boolean isMfaRequired) {
    this.isMfaRequired = isMfaRequired;
    return this;
  }

   /**
   * Get isMfaRequired
   * @return isMfaRequired
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_MFA_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsMfaRequired() {
    return isMfaRequired;
  }


  @JsonProperty(JSON_PROPERTY_IS_MFA_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsMfaRequired(Boolean isMfaRequired) {
    this.isMfaRequired = isMfaRequired;
  }


  public CurrentApiSessionDetail lastActivityAt(OffsetDateTime lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
    return this;
  }

   /**
   * Get lastActivityAt
   * @return lastActivityAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_ACTIVITY_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastActivityAt() {
    return lastActivityAt;
  }


  @JsonProperty(JSON_PROPERTY_LAST_ACTIVITY_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastActivityAt(OffsetDateTime lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
  }


  public CurrentApiSessionDetail token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToken() {
    return token;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToken(String token) {
    this.token = token;
  }


  public CurrentApiSessionDetail expirationSeconds(Integer expirationSeconds) {
    this.expirationSeconds = expirationSeconds;
    return this;
  }

   /**
   * Get expirationSeconds
   * @return expirationSeconds
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRATION_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExpirationSeconds() {
    return expirationSeconds;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpirationSeconds(Integer expirationSeconds) {
    this.expirationSeconds = expirationSeconds;
  }


  public CurrentApiSessionDetail expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Get expiresAt
   * @return expiresAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  /**
   * Return true if this currentApiSessionDetail object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentApiSessionDetail currentApiSessionDetail = (CurrentApiSessionDetail) o;
    return Objects.equals(this.links, currentApiSessionDetail.links) &&
        Objects.equals(this.createdAt, currentApiSessionDetail.createdAt) &&
        Objects.equals(this.id, currentApiSessionDetail.id) &&
        Objects.equals(this.tags, currentApiSessionDetail.tags) &&
        Objects.equals(this.updatedAt, currentApiSessionDetail.updatedAt) &&
        Objects.equals(this.authQueries, currentApiSessionDetail.authQueries) &&
        Objects.equals(this.authenticatorId, currentApiSessionDetail.authenticatorId) &&
        Objects.equals(this.cachedLastActivityAt, currentApiSessionDetail.cachedLastActivityAt) &&
        Objects.equals(this.configTypes, currentApiSessionDetail.configTypes) &&
        Objects.equals(this.identity, currentApiSessionDetail.identity) &&
        Objects.equals(this.identityId, currentApiSessionDetail.identityId) &&
        Objects.equals(this.ipAddress, currentApiSessionDetail.ipAddress) &&
        Objects.equals(this.isMfaComplete, currentApiSessionDetail.isMfaComplete) &&
        Objects.equals(this.isMfaRequired, currentApiSessionDetail.isMfaRequired) &&
        Objects.equals(this.lastActivityAt, currentApiSessionDetail.lastActivityAt) &&
        Objects.equals(this.token, currentApiSessionDetail.token) &&
        Objects.equals(this.expirationSeconds, currentApiSessionDetail.expirationSeconds) &&
        Objects.equals(this.expiresAt, currentApiSessionDetail.expiresAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, createdAt, id, tags, updatedAt, authQueries, authenticatorId, cachedLastActivityAt, configTypes, identity, identityId, ipAddress, isMfaComplete, isMfaRequired, lastActivityAt, token, expirationSeconds, expiresAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentApiSessionDetail {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    authQueries: ").append(toIndentedString(authQueries)).append("\n");
    sb.append("    authenticatorId: ").append(toIndentedString(authenticatorId)).append("\n");
    sb.append("    cachedLastActivityAt: ").append(toIndentedString(cachedLastActivityAt)).append("\n");
    sb.append("    configTypes: ").append(toIndentedString(configTypes)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    identityId: ").append(toIndentedString(identityId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    isMfaComplete: ").append(toIndentedString(isMfaComplete)).append("\n");
    sb.append("    isMfaRequired: ").append(toIndentedString(isMfaRequired)).append("\n");
    sb.append("    lastActivityAt: ").append(toIndentedString(lastActivityAt)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    expirationSeconds: ").append(toIndentedString(expirationSeconds)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `_links` to the URL query string
    if (getLinks() != null) {
      for (String _key : getLinks().keySet()) {
        if (getLinks().get(_key) != null) {
          joiner.add(getLinks().get(_key).toUrlQueryString(String.format("%s_links%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tags` to the URL query string
    if (getTags() != null) {
      joiner.add(getTags().toUrlQueryString(prefix + "tags" + suffix));
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `authQueries` to the URL query string
    if (getAuthQueries() != null) {
      for (int i = 0; i < getAuthQueries().size(); i++) {
        if (getAuthQueries().get(i) != null) {
          joiner.add(getAuthQueries().get(i).toUrlQueryString(String.format("%sauthQueries%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `authenticatorId` to the URL query string
    if (getAuthenticatorId() != null) {
      joiner.add(String.format("%sauthenticatorId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAuthenticatorId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cachedLastActivityAt` to the URL query string
    if (getCachedLastActivityAt() != null) {
      joiner.add(String.format("%scachedLastActivityAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCachedLastActivityAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `configTypes` to the URL query string
    if (getConfigTypes() != null) {
      for (int i = 0; i < getConfigTypes().size(); i++) {
        joiner.add(String.format("%sconfigTypes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getConfigTypes().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `identity` to the URL query string
    if (getIdentity() != null) {
      joiner.add(getIdentity().toUrlQueryString(prefix + "identity" + suffix));
    }

    // add `identityId` to the URL query string
    if (getIdentityId() != null) {
      joiner.add(String.format("%sidentityId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIdentityId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ipAddress` to the URL query string
    if (getIpAddress() != null) {
      joiner.add(String.format("%sipAddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIpAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isMfaComplete` to the URL query string
    if (getIsMfaComplete() != null) {
      joiner.add(String.format("%sisMfaComplete%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsMfaComplete()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isMfaRequired` to the URL query string
    if (getIsMfaRequired() != null) {
      joiner.add(String.format("%sisMfaRequired%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsMfaRequired()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `lastActivityAt` to the URL query string
    if (getLastActivityAt() != null) {
      joiner.add(String.format("%slastActivityAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastActivityAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `token` to the URL query string
    if (getToken() != null) {
      joiner.add(String.format("%stoken%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getToken()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expirationSeconds` to the URL query string
    if (getExpirationSeconds() != null) {
      joiner.add(String.format("%sexpirationSeconds%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpirationSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expiresAt` to the URL query string
    if (getExpiresAt() != null) {
      joiner.add(String.format("%sexpiresAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiresAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

