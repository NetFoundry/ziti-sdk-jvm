/*
 * Copyright (c) 2018-2021 NetFoundry, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id("java-library")
    id("org.jetbrains.kotlin.jvm")
    id 'org.jetbrains.dokka'
    id 'maven-publish'
}

ext {
    description "Ziti SDK for JVM"
}

dependencies {
    implementation deps.kotlin
    implementation deps.kotlinCoroutines
    implementation deps.kotlinCoroutines8
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${versions.coroutines}")

    implementation deps.slf4jApi

    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')
    implementation('com.squareup.okhttp3:logging-interceptor:3.14.9')
    implementation("com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2")

    def jjwt_ver = '0.11.2'
    implementation("io.jsonwebtoken:jjwt-api:$jjwt_ver")
    implementation("io.jsonwebtoken:jjwt-impl:$jjwt_ver")
    implementation("io.jsonwebtoken:jjwt-orgjson:$jjwt_ver")
    implementation('io.dropwizard.metrics:metrics-core:4.2.4')
    implementation('org.bouncycastle:bcpkix-jdk15to18:1.69')

    implementation("com.goterl:lazysodium-java:${versions.lazysodium}") {
        exclude module: 'slf4j-api'
    }

    testApi deps.jupiterApi
    testImplementation deps.jupiter
    testImplementation deps.kotlinTest
    testImplementation deps.kotlinCoroutinesTest
    testImplementation deps.slf4jSimple
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks {
    def generatedResourcesDir = "${buildDir}/generated-resources/main"

    task versionProps(type: WriteProperties) {
        outputFile = "${generatedResourcesDir}/org/openziti/util/ziti-version.properties"

        property("version", "${project.version}")
        property("revision", gitCommit)
        property("branch", gitBranch)
    }

    task fullJar(type: Jar) {
        manifest.from jar.manifest
        classifier = 'full'
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
            exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/**/module-info.class'
        }
        with jar
    }

    sourceSets.main {
        resources.srcDir(files(generatedResourcesDir).builtBy(versionProps))
    }
}

tasks.withType(Test).forEach {
    it.systemProperty('org.slf4j.simpleLogger.defaultLogLevel','TRACE')
    it.systemProperty('org.slf4j.simpleLogger.showDateTime', 'true')
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs
    classifier "sources"
}

tasks.register('dokkaJar', Jar) {
    classifier('javadoc')
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives(sourcesJar)
    archives(dokkaJar)
    archives(fullJar)
}

publishing {
    publications {
        zitiJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact dokkaJar
            artifact fullJar
        }
    }
}

apply from: rootProject.file('publish.gradle')
