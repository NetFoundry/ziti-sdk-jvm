/*
 * Copyright (c) 2018-2020 NetFoundry, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id("java-library")
    id("application")
    id("org.jetbrains.kotlin.jvm")
    id("maven")
    id("maven-publish")
    id("com.jfrog.artifactory")
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.61")
    // compile(kotlin("reflect"))

    compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1")

    compile("com.squareup.retrofit2:retrofit:2.6.0")
    compile("com.squareup.retrofit2:converter-gson:2.6.0")
    compile("com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2")

    compile("io.jsonwebtoken:jjwt-api:0.10.7")
    compile("io.jsonwebtoken:jjwt-impl:0.10.7")
    compile("io.jsonwebtoken:jjwt-orgjson:0.10.7")

    compile("org.bouncycastle:bcpkix-jdk15on:1.62")

    implementation("com.github.ajalt:clikt:2.2.0")

    testCompile("org.jetbrains.kotlin:kotlin-test-junit:+")
}

application {
    mainClassName = "io.netfoundry.ziti.identity.Enroller"
    applicationName = "ziti-enroller"
}

tasks {

    def generatedResourcesDir = "${buildDir}/generated-resources/main"


    task versionProps(type: WriteProperties) {
        outputFile = "${generatedResourcesDir}/io/netfoundry/ziti/util/ziti-version.properties"

        property("version", "${project.version}")
        property("revision", gitCommit)
        property("branch", gitBranch)
    }

    sourceSets.main {
        resources.srcDir(files(generatedResourcesDir).builtBy(versionProps))
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier "sources"
}

ext {
    repo = rootProject.property("publish.repo") ?: "file://${buildDir}/maven-repo"
}

artifacts {
    archives(sourcesJar)
}

publishing {
    repositories {
        maven {
            name = "BuildRepo"
            url = uri(repo)
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from(components["java"])
            artifact(sourcesJar)
            artifact(distZip)
        }
    }
}


artifactory {
    setContextUrl("https://netfoundry.jfrog.io/netfoundry")
    publish {
        repository{
            setProperty("repoKey", "ziti-maven")
            setProperty("username", "ziti-ci")
            setProperty("password", System.getenv("JFROG_API_KEY"))
            setProperty("maven", true)
        }
        defaults{
            publications("mavenJava")
            publishPom = true
            publishArtifacts = true
        }
    }
}
