/*
 * Copyright (c) 2018-2020 NetFoundry, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id("java-library")
    id("org.jetbrains.kotlin.jvm")
    id "com.jfrog.bintray"
}

dependencies {
    implementation deps.kotlin
    implementation deps.kotlinCoroutines
    implementation deps.kotlinCoroutines8

    implementation deps.slf4jApi

    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')
    implementation('com.squareup.okhttp3:logging-interceptor:3.14.9')
    implementation("com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2")

    def jjwt_ver = '0.11.2'
    implementation("io.jsonwebtoken:jjwt-api:$jjwt_ver")
    implementation("io.jsonwebtoken:jjwt-impl:$jjwt_ver")
    implementation("io.jsonwebtoken:jjwt-orgjson:$jjwt_ver")
    implementation('io.dropwizard.metrics:metrics-core:4.1.15')
    implementation('org.bouncycastle:bcpkix-jdk15to18:1.67')

    implementation("com.goterl.lazycode:lazysodium-java:4.3.0") {
        exclude module: 'slf4j-api'
    }

    testImplementation deps.junit
    testImplementation deps.kotlinTest
    testImplementation deps.kotlinCoroutinesTest
    testImplementation deps.slf4jSimple
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks {
    def generatedResourcesDir = "${buildDir}/generated-resources/main"

    task versionProps(type: WriteProperties) {
        outputFile = "${generatedResourcesDir}/org/openziti/util/ziti-version.properties"

        property("version", "${project.version}")
        property("revision", gitCommit)
        property("branch", gitBranch)
    }

    sourceSets.main {
        resources.srcDir(files(generatedResourcesDir).builtBy(versionProps))
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs
    classifier "sources"
}

dokka {
    outputFormat = 'html'
    configuration {
        jdkVersion = 8
        sourceLink {
            path = "src/main/kotlin"
            url = "https://github.com/openziti/ziti-sdk-jvm/blob/master/ziti/src/main/kotlin"
            lineSuffix = "#L"
        }
    }
}

task dokkaJar(type: Jar, dependsOn: dokka) {
    classifier('javadoc')
    from dokka.outputDirectory
}

artifacts {
    archives(sourcesJar)
    archives(dokkaJar)
}

publishing {
    publications {
        zitiJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact dokkaJar
        }
    }
}

bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    publications = ['zitiJava']
    publish = true

    pkg {
        userOrg = parent.bintrayOrg
        repo = parent.bintrayRepo
        name = 'ziti'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/openziti/ziti-sdk-jvm/'
        issueTrackerUrl = 'https://github.com/openziti/ziti-sdk-jvm/issues'
        vcsUrl = 'https://github.com/openziti/ziti-sdk-jvm.git'
        version {
            name = project.version
            desc = project.version
            released = new Date()
        }
    }
}